<<<<<<< HEAD
# recover R.C from input of V, so MAGENTA doesn't need the extra input of R.C
if(is.null(R.C)) {
R.C <- recoverLD(sumstats = sumstats, snp.list = snp.list)
message("The LD matrix is not provided and recovered from the summary statistics V.")
}
## first calculate main p value
U.comb <- V.comb <- list()
for(k in 1:K) {
U.temp <- sumstats[[1]][[k]]$U
V.temp <- sumstats[[1]][[k]]$V
for(d in 2:D) {
U.temp <- U.temp + sumstats[[d]][[k]]$U
V.temp <- V.temp + sumstats[[d]][[k]]$V
}
U.comb[[k]] <- U.temp
V.comb[[k]] <- V.temp
}
combMTAR.p <- try(MAGENTA.main(U = U.comb, V = V.comb, MAF = MAF, R.C = R.C, snp.list = names(MAF),
cct = TRUE, KA = KA, zeta = zeta.ret$zeta.main, diffweight = FALSE)$p,
silent = T)
singletrait.p <- list()
for(k in 1:K){
singletrait.p[[k]] <- try(MAGENTA.main(U = list(U.comb[[k]]), V = list(V.comb[[k]]), MAF = MAF, R.C = R.C,
snp.list = names(MAF), KA = matrix(1),
rho.trait = c(0.5, 5, 1),
zeta = matrix(1), cct = TRUE, diffweight = FALSE)$p,silent = T)
}
if(inherits(combMTAR.p, "try-error")|
any(sapply(singletrait.p, function(x) inherits(x, "try-error")))){
main.p <- rep(NA, 4)
}else{
main.p <- c(combMTAR.p, unlist(singletrait.p))
}
names(main.p) <- c("Multi.M", paste0(trait.list, ".M"))
main.p
# print(main.p)
if(SPA) {
variant.p <- variantP3(sumstats = sumstats.SPA, zeta.ret = zeta.ret,
MAF = MAF, R.C = R.C, KA = KA, MAF.thres = MAF.thres,
test = "main", SPA = TRUE)
}else{
variant.p <- variantP3(sumstats = sumstats, zeta.ret = zeta.ret,
MAF = MAF, R.C = R.C, KA = KA, MAF.thres = MAF.thres,
test = "main", SPA = FALSE)
}
variant.p
p.main.wo <- main.p
main.varp <- cbind(as.numeric(stringr::str_split(variant.p$main[1], ":")[[1]]),
matrix(as.numeric(stringr::str_split(variant.p$main[2], ":")[[1]]), ncol = 3))
main.varp
MAC10 <- which(MAF > MAF.thres)
rownames(main.varp) <- names(MAC10)
main.varp
highLD <- try(caret::findCorrelation(R.C[colnames(R.C) %in% names(MAC10), colnames(R.C) %in% names(MAC10)],
cutoff = 0.98),silent = T)
if(length(highLD)!=0 & !inherits(highLD, "try-error")) {
main.new <- main.varp[-highLD, ,drop = FALSE]
}else{
main.new <- main.varp
}
main.new
p.main.w <- ACAT(c(p.main.wo, main.new))
p.main.w
obs.stat <- list()
U.complete <- list()
for (d in 1:D) {
U.temp <- list()
obs.stat.temp <- list()
for (k in 1:K) {
U.bytrait <- numeric(length(snp.list))
V.bytrait <- matrix(0, length(snp.list), length(snp.list))
names(U.bytrait) <- snp.list
colnames(V.bytrait) <- rownames(V.bytrait) <- snp.list
order1 <- order(match(names(sumstats[[d]][[k]]$U)[names(sumstats[[d]][[k]]$U) %in% snp.list], snp.list))
order2 <- which(snp.list %in% names(sumstats[[d]][[k]]$U))
U.bytrait[order2] <- sumstats[[d]][[k]]$U[order1]
V.bytrait[order2, order2] <- sumstats[[d]][[k]]$V[order1, order1]
if(test == "GEI") {
U.bytrait[U.bytrait == 0] <- NA
V.bytrait[V.bytrait == 0] <- NA
}
obs.stat.temp[[k]] <- list(U = U.bytrait, V = V.bytrait)
U.temp[[k]] <- U.bytrait
}
obs.stat[[d]] <- obs.stat.temp
U.complete[[d]] <- U.temp
}
test <- "joint"
obs.stat <- list()
U.complete <- list()
for (d in 1:D) {
U.temp <- list()
obs.stat.temp <- list()
for (k in 1:K) {
U.bytrait <- numeric(length(snp.list))
V.bytrait <- matrix(0, length(snp.list), length(snp.list))
names(U.bytrait) <- snp.list
colnames(V.bytrait) <- rownames(V.bytrait) <- snp.list
order1 <- order(match(names(sumstats[[d]][[k]]$U)[names(sumstats[[d]][[k]]$U) %in% snp.list], snp.list))
order2 <- which(snp.list %in% names(sumstats[[d]][[k]]$U))
U.bytrait[order2] <- sumstats[[d]][[k]]$U[order1]
V.bytrait[order2, order2] <- sumstats[[d]][[k]]$V[order1, order1]
if(test == "GEI") {
U.bytrait[U.bytrait == 0] <- NA
V.bytrait[V.bytrait == 0] <- NA
}
obs.stat.temp[[k]] <- list(U = U.bytrait, V = V.bytrait)
U.temp[[k]] <- U.bytrait
}
obs.stat[[d]] <- obs.stat.temp
U.complete[[d]] <- U.temp
}
obs.stat
U.complete
convert_UV_to_betacov <- function(D, K, snp.list, sumstats, test, R.C){
obs.stat <- list()
U.complete <- list()
for (d in 1:D) {
U.temp <- list()
obs.stat.temp <- list()
for (k in 1:K) {
U.bytrait <- numeric(length(snp.list))
V.bytrait <- matrix(0, length(snp.list), length(snp.list))
names(U.bytrait) <- snp.list
colnames(V.bytrait) <- rownames(V.bytrait) <- snp.list
order1 <- order(match(names(sumstats[[d]][[k]]$U)[names(sumstats[[d]][[k]]$U) %in% snp.list], snp.list))
order2 <- which(snp.list %in% names(sumstats[[d]][[k]]$U))
U.bytrait[order2] <- sumstats[[d]][[k]]$U[order1]
V.bytrait[order2, order2] <- sumstats[[d]][[k]]$V[order1, order1]
if(test == "GEI") {
U.bytrait[U.bytrait == 0] <- NA
V.bytrait[V.bytrait == 0] <- NA
}
obs.stat.temp[[k]] <- list(U = U.bytrait, V = V.bytrait)
U.temp[[k]] <- U.bytrait
}
obs.stat[[d]] <- obs.stat.temp
U.complete[[d]] <- U.temp
}
if(test == "GEI") {
nonpolymorphic <- FALSE
# pre-process non-polymorphic SNPs that are polymorphic at least in two groups.
if (any(is.na(unlist(U.complete)))) {
nonpoly.list <- list()
analyze.snp <- list()
for(k in 1:K) {
ind <- NULL
for(d in 1:D){
ind <- rbind(ind, ifelse(is.na(obs.stat[[d]][[k]]$U), 1, 0))
}
nonpoly.list[[k]] <- which(apply(ind, 2, sum) > D-2)
analyze.snp[[k]] <- colnames(ind)[-which(apply(ind, 2, sum)> D-2)]
}
# message("Remove non-polymorphic SNPs in at least two drug assignment groups")
update.obs.stat <- list()
for (d in 1:D) {
obs.stat.temp <- list()
for (k in 1:K) {
ind <- nonpoly.list[[k]]
if (length(ind) != 0) {
U.tmp <- obs.stat[[d]][[k]]$U[-ind]
V.tmp <- obs.stat[[d]][[k]]$V[-ind, -ind, drop = FALSE]
obs.stat.temp[[k]] <- list(U = U.tmp, V = V.tmp)
}
else {
obs.stat.temp[[k]] <- list(U = obs.stat[[d]][[k]]$U, V = obs.stat[[d]][[k]]$V)
}
}
update.obs.stat[[d]] <- obs.stat.temp
}
update.R.C <- nonpolymorphic.fn(R.C, obs.stat, GEI = TRUE, nonpoly.list = nonpoly.list)
nonpolymorphic <- TRUE
}
if (nonpolymorphic) {
obs.stat1 <- update.obs.stat
}else {
obs.stat1 <- obs.stat
}
V.sqrt <- list() #contain the square root of all D by K covariance matrix V.
for(d in 1:D) {
V.sqrt.temp <- list()
for(k in 1:K) {
V.sqrt.temp[[k]] <- diag(length(obs.stat1[[d]][[k]]$U))
diag(V.sqrt.temp[[k]]) <- sqrt(diag(obs.stat1[[d]][[k]]$V))
rownames(V.sqrt.temp[[k]]) <- rownames(obs.stat1[[d]][[k]]$V)
colnames(V.sqrt.temp[[k]]) <- colnames(obs.stat1[[d]][[k]]$V)
}
V.sqrt[[d]] <- V.sqrt.temp
}
trait.ind <- expand.grid(row.ind = 1:K, column.ind = 1:K)
trait.drug.ind <- expand.grid(column.trait = 1:K, column.drug = 1:D, row.trait = 1:K, row.drug = 1:D)
Ucov <- list()
for(iter in 1:nrow(trait.drug.ind)) {
d1 <- trait.drug.ind[iter, 4]
d2 <- trait.drug.ind[iter, 2]
k1 <- trait.drug.ind[iter, 3]
k2 <- trait.drug.ind[iter, 1]
zeta.row <- k1 + (d1 - 1) * K
zeta.col <- k2 + (d2 - 1) * K
if (nonpolymorphic) {
Ucov[[iter]] <- zeta.ret$zeta.GE[zeta.row, zeta.col] * diag(V.sqrt[[d1]][[k1]])  %*%
t(diag(V.sqrt[[d2]][[k2]])) * update.R.C[[d1]][[which(trait.ind$row.ind == k1 & trait.ind$column.ind == k2)]]
} else {
Ucov[[iter]] <-  zeta.ret$zeta.GE[zeta.row, zeta.col] * diag(V.sqrt[[d1]][[k1]])  %*%
t(diag(V.sqrt[[d2]][[k2]])) * R.C
}
# if(!diagTrans) {
#   if(k1 == k2 & d1 == d2) {
#     Ucov[[iter]] <- obs.stat1[[d1]][[k1]]$V
#   }
# }
rownames(Ucov[[iter]]) <- rownames(obs.stat1[[d1]][[k1]]$V)
colnames(Ucov[[iter]]) <- colnames(obs.stat1[[d2]][[k2]]$V)
}
V.inv <- list()
for(d in 1:D) {
V.inv.tmp <- list()
for(k in 1:K) {
V.subset.tmp <- obs.stat1[[d]][[k]]$V[!is.na(obs.stat1[[d]][[k]]$U),
!is.na(obs.stat1[[d]][[k]]$U),drop = FALSE]
V.inv.tmp[[k]] <- MASS::ginv(V.subset.tmp)
rownames(V.inv.tmp[[k]]) <- rownames(V.subset.tmp)
colnames(V.inv.tmp[[k]]) <- colnames(V.subset.tmp)
}
V.inv[[d]] <- V.inv.tmp
}
beta.est <- NULL
for(d in 1:D){
for(k in 1:K) {
tmp <- V.inv[[d]][[k]] %*% obs.stat1[[d]][[k]]$U[!is.na(obs.stat1[[d]][[k]]$U)]
names(tmp) <- paste0(names(obs.stat1[[d]][[k]]$U), ":", k, ":",d)
beta.est <- c(beta.est,tmp)
}
}
trait.grid <- expand.grid(trait1 = 1:K, trait2 = 1:K)
beta.cov <- list()
for(d in 1:D) {
beta.cov.tmp <- list()
for(trait.pair in 1:nrow(trait.grid)) {
k1 <- trait.grid[trait.pair, 1]
k2 <- trait.grid[trait.pair, 2]
if(k2 <= k1) {
trait.drug.iter1 <- which(trait.drug.ind$row.trait == k1 & trait.drug.ind$column.trait == k2 &
trait.drug.ind$row.drug == d & trait.drug.ind$column.drug == d)
part1 <- V.inv[[d]][[k1]] %*%
Ucov[[trait.drug.iter1]][!is.na(obs.stat1[[d]][[k1]]$U),
!is.na(obs.stat1[[d]][[k2]]$U), drop = FALSE] %*%
V.inv[[d]][[k2]]
part1 <- part1[rownames(part1) %in% analyze.snp[[k1]],
colnames(part1) %in% analyze.snp[[k2]],drop = FALSE]
part1.full <- matrix(NA, length(analyze.snp[[k1]]), length(analyze.snp[[k2]]))
rownames(part1.full) <- analyze.snp[[k1]]
colnames(part1.full) <- analyze.snp[[k2]]
part1.full[match(rownames(part1), rownames(part1.full)),
match(colnames(part1), colnames(part1.full))] <- part1
}else{
part1.full <- t(beta.cov.tmp[[which(trait.grid$trait1 == k2 & trait.grid$trait2 == k1)]])
}
beta.cov.tmp[[trait.pair]] <- part1.full
}
names(beta.cov.tmp) <- apply(trait.grid, 1, function(x) paste0("Traits", x[1], "_", x[2]))
beta.cov[[d]] <- beta.cov.tmp
}
## prepare differentiated summary statistics for GEI test
delta <- NULL
for(d in setdiff(1:D, ref)) {
for(k in 1:K) {
delta.part1 <- delta.part2 <-  rep(NA, length(analyze.snp[[k]]))
names(delta.part1) <- names(delta.part2) <- analyze.snp[[k]]
delta.part1.tmp <- t(V.inv[[d]][[k]] %*% obs.stat1[[d]][[k]]$U[!is.na(obs.stat1[[d]][[k]]$U)])
delta.part2.tmp <- t(V.inv[[ref]][[k]] %*% obs.stat1[[ref]][[k]]$U[!is.na(obs.stat1[[ref]][[k]]$U)])
delta.part1[match(colnames(delta.part1.tmp), names(delta.part1))] <- delta.part1.tmp
delta.part2[match(colnames(delta.part2.tmp), names(delta.part2))] <- delta.part2.tmp
delta.diff <- delta.part1 - delta.part2
names(delta.diff) <- paste0(analyze.snp[[k]], ":", k, ":", d)
delta <- c(delta, delta.diff)
}
}
# delta <- ginv(V.diag.all) %*% U.all - kronecker(matrix(1, D), ginv(V.sum) %*% U.sum.bytrait)
Sigma.delta <- NULL
for(d1 in setdiff(1:D, ref)) {
Sigma.delta.col <- NULL
for(d2 in setdiff(1:D, ref)) {
delta.cov <- NULL
for(k1 in 1:K) {
delta.cov.col <- NULL
for(k2 in 1:K) {
trait.drug.iter1 <- which(trait.drug.ind$row.trait == k1 & trait.drug.ind$column.trait == k2 & trait.drug.ind$row.drug == d1 & trait.drug.ind$column.drug == d2)
trait.drug.iter4 <- which(trait.drug.ind$row.trait == k1 & trait.drug.ind$column.trait == k2 & trait.drug.ind$row.drug == ref & trait.drug.ind$column.drug == ref)
part1 <- V.inv[[d1]][[k1]] %*%
Ucov[[trait.drug.iter1]][!is.na(obs.stat1[[d1]][[k1]]$U),
!is.na(obs.stat1[[d2]][[k2]]$U), drop = FALSE] %*%
V.inv[[d2]][[k2]]
part4 <- V.inv[[ref]][[k1]] %*%
Ucov[[trait.drug.iter4]][!is.na(obs.stat1[[ref]][[k1]]$U),
!is.na(obs.stat1[[ref]][[k2]]$U), drop = FALSE] %*%
V.inv[[ref]][[k2]]
part1 <- part1[rownames(part1) %in% analyze.snp[[k1]],
colnames(part1) %in% analyze.snp[[k2]],drop = FALSE]
part4 <- part4[rownames(part4) %in% analyze.snp[[k1]],
colnames(part4) %in% analyze.snp[[k2]],drop = FALSE]
part1.full <- part4.full <- matrix(NA, length(analyze.snp[[k1]]),
length(analyze.snp[[k2]]))
rownames(part1.full) <- rownames(part4.full) <- analyze.snp[[k1]]
colnames(part1.full) <- colnames(part4.full) <- analyze.snp[[k2]]
part1.full[match(rownames(part1), rownames(part1.full)),
match(colnames(part1), colnames(part1.full))] <- part1
part4.full[match(rownames(part4), rownames(part4.full)),
match(colnames(part4), colnames(part4.full))] <- part4
if(d1 == d2) {
delta.cov.col <- cbind(delta.cov.col, part1.full + part4.full)
}else{
delta.cov.col <- cbind(delta.cov.col, part4.full)
}
}
delta.cov <- rbind(delta.cov, delta.cov.col)
}
Sigma.delta.col <- cbind(Sigma.delta.col, delta.cov)
}
Sigma.delta <- rbind(Sigma.delta, Sigma.delta.col)
}
rownames(Sigma.delta) <- colnames(Sigma.delta) <- names(delta)
Sigma.delta <- Sigma.delta[!is.na(delta), !is.na(delta), drop = FALSE]
final.ret <- list(beta.est = beta.est, beta.cov = beta.cov, delta = delta,
Sigma.delta = Sigma.delta, obs.stat = obs.stat,
nonpoly.list = nonpoly.list)
}else if(test == "joint") {
obs.stat1 <- obs.stat
V.sqrt <- list() #contain the square root of all D by K covariance matrix V.
for(d in 1:D) {
V.sqrt.temp <- list()
for(k in 1:K) {
V.sqrt.temp[[k]] <- diag(length(obs.stat1[[d]][[k]]$U))
diag(V.sqrt.temp[[k]]) <- sqrt(diag(obs.stat1[[d]][[k]]$V))
}
V.sqrt[[d]] <- V.sqrt.temp
}
trait.ind <- expand.grid(row.ind = 1:K, column.ind = 1:K)
U.cov.bydrug <- list()
V.diag.bydrug <- list()
for(d in 1:D) {
Ucov <- list()
for (iter in 1:nrow(trait.ind)) {
k1 <- trait.ind[iter, 1]
k2 <- trait.ind[iter, 2]
Ucov[[iter]] <- diag(V.sqrt[[d]][[k1]])  %*%  t(diag(V.sqrt[[d]][[k2]])) * R.C
# if(!diagTrans) {
#   if(k1 == k2) { #diagonal matrices
#     Ucov[[iter]] <- obs.stat1[[d]][[k1]]$V
#   }
# }
}
U.cov <- NULL
mlist <- list()
for (col_id in 1:K) {
diag.ind <- which(trait.ind$column.ind == col_id & trait.ind$row.ind == col_id)
U.cov.col <- NULL
index <- which(trait.ind$column.ind == col_id)
row_id <- trait.ind[index, 1]
for (iter in 1:length(index)) {
U.cov.col <- rbind(U.cov.col, as.matrix(zeta.ret$zeta.joint[[d]][row_id[iter], col_id] * Ucov[[index[iter]]]))
}
U.cov <- cbind(U.cov, U.cov.col)
mlist[[col_id]] <- Ucov[[diag.ind]]
}
U.cov <- as.matrix(U.cov)
U.cov.bydrug[[d]] <- U.cov
V.diag.bydrug[[d]] <- as.matrix(Matrix::bdiag(mlist))
}
U.cov.all <- as.matrix(Matrix::bdiag(U.cov.bydrug))
U.inv <- try(MASS::ginv(U.cov.all), silent = T)
# print(paste0("Done inverse of U at ", Sys.time()))
if (inherits(U.inv, "try-error")) {
warning("The covariance matrix of U is exactly singular, MASS:ginv() function doesn't work here.")
MAGENTA.cct.p <- list(p = NA, rho1.min = NA, rho2.min = NA,rho3.min = NA)
return(MAGENTA.cct.p)
}
V.diag.all <- as.matrix(Matrix::bdiag(V.diag.bydrug))
Sigma.inv <- V.diag.all %*% U.inv %*% V.diag.all #inverse of covariance matrix of beta
U.all <- NULL
for (DT.ind in 1:nrow(drug_trait)) {
d <- drug_trait[DT.ind, 2]
k <- drug_trait[DT.ind, 1]
tmp <- obs.stat1[[d]][[k]]$U
names(tmp) <- paste0(names(obs.stat1[[d]][[k]]$U), ":", k, ":",d)
U.all <- c(U.all, tmp)
}
U.all <- as.matrix(U.all)
beta.est <- MASS::ginv(V.diag.all) %*% U.all
beta.cov <- MASS::ginv(Sigma.inv)
rownames(beta.est) <- rownames(Sigma.inv) <- rownames(beta.cov) <-
rownames(U.inv) <- colnames(U.inv) <-
colnames(Sigma.inv) <- colnames(beta.cov) <- rownames(U.all)
final.ret <- list(beta.est = beta.est, beta.cov = beta.cov,
U.all = U.all, Sigma.inv = Sigma.inv, V.diag.all = V.diag.all, U.inv = U.inv)
}
return(final.ret)
}
sumstats
final.ret <- convert_UV_to_betacov(D = D, K = K, snp.list = snp.list, sumstats = sumstats, R.C = R.C, test = test)
final.ret
source("/SFS/user/ctc/luolan2/MAGENTA/R/sumstats_ongoing.R")
rm(list = ls())
K <- 3
KA <- matrix(c(1, -0.03, 0.3, -0.03, 1, -0.535, 0.3, -0.535, 1), byrow = T, nrow = 3)
rownames(KA) <- colnames(KA) <- paste0("Trait", 1:K)
trait.list = paste0("Trait", 1:K)
drug.list = paste0("Drug", 0:1)
D <- 2
source("/home/luolan2/MTAR_PGx/MAGENTA_fns.R")
source("/home/luolan2/MAGENTA/R/sumstats.R")
source("/home/luolan2/MAGENTA/R/misc.R")
source("/home/luolan2/MAGENTA/R/other.R")
source("/home/luolan2/MAGENTA/R/MAGENTA.R")
source("/home/luolan2/MAGENTA/R/ACAT.R")
source("/home/luolan2/MAGENTA/R/old_MAGENTA.R")
names(sumstats.dat)
load("/home/luolan2/MAGENTA/data/sumstats_data.rda")
names(sumstats.dat)
# attach(sumstats.dat)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
common.sumstats
all.equal(common.sumstats, sumstats.dat$common.sumstats)
load("/home/luolan2/MAGENTA/data/sumstats_data.rda")
names(sumstats.dat)
# attach(sumstats.dat)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
source("/home/luolan2/MTAR_PGx/MAGENTA_fns.R")
source("/home/luolan2/MAGENTA/R/sumstats.R")
source("/home/luolan2/MAGENTA/R/misc.R")
source("/home/luolan2/MAGENTA/R/other.R")
source("/home/luolan2/MAGENTA/R/MAGENTA.R")
source("/home/luolan2/MAGENTA/R/ACAT.R")
source("/home/luolan2/MAGENTA/R/old_MAGENTA.R")
# attach(sumstats.dat)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
K <- 3
KA <- matrix(c(1, -0.03, 0.3, -0.03, 1, -0.535, 0.3, -0.535, 1), byrow = T, nrow = 3)
rownames(KA) <- colnames(KA) <- paste0("Trait", 1:K)
trait.list = paste0("Trait", 1:K)
drug.list = paste0("Drug", 0:1)
D <- 2
# attach(sumstats.dat)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
str(common.sumstats)
str(sumstats.dat$common.sumstats)
rm(list = ls())
K <- 3
KA <- matrix(c(1, -0.03, 0.3, -0.03, 1, -0.535, 0.3, -0.535, 1), byrow = T, nrow = 3)
rownames(KA) <- colnames(KA) <- paste0("Trait", 1:K)
trait.list = paste0("Trait", 1:K)
drug.list = paste0("Drug", 0:1)
D <- 2
load("/home/luolan2/MAGENTA/data/sumstats_data.rda")
names(sumstats.dat)
# attach(sumstats.dat)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
source("/home/luolan2/MAGENTA/R/sumstats.R")
source("/home/luolan2/MAGENTA/R/misc.R")
source("/home/luolan2/MAGENTA/R/other.R")
source("/home/luolan2/MAGENTA/R/MAGENTA.R")
source("/home/luolan2/MAGENTA/R/ACAT.R")
source("/home/luolan2/MAGENTA/R/old_MAGENTA.R")
# attach(sumstats.dat)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
rm(list = ls())
K <- 3
KA <- matrix(c(1, -0.03, 0.3, -0.03, 1, -0.535, 0.3, -0.535, 1), byrow = T, nrow = 3)
rownames(KA) <- colnames(KA) <- paste0("Trait", 1:K)
trait.list = paste0("Trait", 1:K)
drug.list = paste0("Drug", 0:1)
D <- 2
# source("/home/luolan2/MTAR_PGx/MAGENTA_fns.R")
source("/home/luolan2/MAGENTA/R/sumstats_ongoing.R")
source("/home/luolan2/MAGENTA/R/misc.R")
source("/home/luolan2/MAGENTA/R/other.R")
source("/home/luolan2/MAGENTA/R/MAGENTA.R")
source("/home/luolan2/MAGENTA/R/ACAT.R")
source("/home/luolan2/MAGENTA/R/old_MAGENTA.R")
load("/home/luolan2/MAGENTA/data/sumstats_data.rda")
names(sumstats.dat)
attach(sumstats.dat)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
rm(list = ls())
=======
rhoS.min = lambda[which.min(p.obs), 2],
rhoT.min = lambda[which.min(p.obs), 1],
rhoE.min = lambda[which.min(p.obs), 3])
}
return(MAGENTA.cct.p)
}
MAGENTA.eq4.sumstats(beta.sumstats.obj = beta.sumstats.MTSV,
MAF = MAF[names(MAF) == MAC10.bygrp[SNP.id]],
KA = KA,test = test, ref = ref,
R.C = R.C[rownames(R.C) == MAC10.bygrp[SNP.id],
colnames(R.C) == MAC10.bygrp[SNP.id], drop = FALSE],
drugStruct = drugStruct,
trait.list = trait.list,
drug.list = drug.list,
cct = cct,
diffweight = diffweight,
threshold = threshold,
weight.commonSNP = weight.commonSNP,
rho.SNP = 1, rho.trait = rho.trait,
rho.drug = rho.drug, weight.SNP = weight.SNP
)
beta.sumstats.MTSV
obs.stat <- beta.sumstats.MTSV$obs.stat
nonpoly.list <- beta.sumstats.MTSV$nonpoly.list
delta <- beta.sumstats.MTSV$delta
Sigma.delta <- beta.sumstats.MTSV$Sigma.delta
obs.stat
delta
Sigma.delta
Sigma.delta.inv
Sigma.delta.inv <- MASS::ginv(Sigma.delta)
Sigma.delta.inv
## start from beta.est and beta.cov
D <- length(drug.list)
K <- length(trait.list)
m <- length(MAF)
snp.list <- names(MAF)
drug_trait <- expand.grid(trait = 1:K, drug = 1:D)
D
MAF[names(MAF) == MAC10.bygrp[SNP.id]]
m <- 1
snp.list <- "SNP6"
drug_trait <- expand.grid(trait = 1:K, drug = 1:D)
ref
drugStruct
if (is.null(drugStruct)){
# message("Assume the effects among environmental groups are independent")
lambda <- expand.grid(lambdaA = rho.trait, lambdaC = rho.SNP, lambdaD = 0)
}else if(drugStruct == "AR1") {
# message("Assume the first-order autoregressive structure for the effects among environmental groups")
lambda <- expand.grid(lambdaA = rho.trait, lambdaC = rho.SNP, lambdaD = rho.drug)
}
lambda
KA
diffweight
if(diffweight) {
# message("Use different weights for rare and common variants:")
if(is.null(weight.commonSNP)){
# message(paste0("No input of weight for common variants, use the default weight of dbeta(MAF,0.5,0.5) for common variants and dbeta(MAF,", paste0(weight.SNP, collapse = ","),  ") for rare variants"))
weight.commonSNP <- c(0.5, 0.5)
}else{
message(paste0("Use the weight of dbeta(MAF,", paste0(weight.SNP, collapse = ","),  ") for rare variants and the weight of dbeta(MAF,", paste0(weight.commonSNP, collapse = ","), ") for common variants"))
}
common.SNP <- which(MAF >= threshold)
}
KC <- diag(m)
MAF <- MAF[order(match(names(MAF), snp.list))]
MAF
snp.list
MAF = MAF[names(MAF) == MAC10.bygrp[SNP.id]]
MAF
MAF <- MAF[order(match(names(MAF), snp.list))]
MAF
diffweight
if(diffweight) {
diag.tmp <- numeric(m)
if(length(common.SNP) != 0) {
diag.tmp[common.SNP] <- Beta.Weights(MAF[common.SNP], weights.beta = weight.commonSNP)
diag.tmp[-common.SNP] <- Beta.Weights(MAF[-common.SNP], weights.beta = weight.SNP)
}else{
diag.tmp <- Beta.Weights(MAF, weights.beta = weight.SNP)
}
}else{
diag.tmp <- Beta.Weights(MAF, weights.beta = weight.SNP) #weights matrix for SNPs
}
diag.tmp
diag(KC) <- diag.tmp
WA <- diag(K)
KC
WA
JC <- matrix(1, nrow = m, ncol = m)
ii <- 1
lambdaA <- lambda[ii, 1]
A <- WA %*% apply(KA, 2, combMTAR, rho = lambdaA) %*% WA
A
lambdaC <- lambda[ii, 2]
C <- diag(KC) %*% t(diag(KC)) * ((1 - lambdaC) * diag(m) + lambdaC * JC)
C
colnames(C) <- snp.list
C
B_D <- ar1_cor(D-1, lambda[ii, 3])
B_D
trait.ind <- expand.grid(row.ind = 1:K, column.ind = 1:K)
update.C <- nonpolymorphic.fn(C, obs.stat, GEI = TRUE, nonpoly.list = nonpoly.list)
update.C
if(m == 1) {
update.C <- C
}else{
update.C <- nonpolymorphic.fn(C, obs.stat, GEI = TRUE, nonpoly.list = nonpoly.list)
}
update.C
B.all <- NULL
for(d1 in setdiff(1:D, ref)) {
B.bydrug <- NULL
for(d2 in setdiff(1:D, ref)) {
B <- NULL
for (col_id in 1:K) {
B.col <- NULL
index <- which(trait.ind$column.ind == col_id)
row_id <- trait.ind[index, 1]
for (iter in 1:length(index)) {
if(m == 1) {
B.col <- rbind(B.col, A[row_id[iter], col_id] *
update.C[[d1]][[index[iter]]])
}else{
B.col <- rbind(B.col, A[row_id[iter], col_id] * update.C)
}
}
B <- cbind(B, B.col)
}
B.bydrug <- cbind(B.bydrug, B_D[d1, d2] * B)
}
B.all <- rbind(B.all, B.bydrug)
}
B.all
m
B.all <- NULL
for(d1 in setdiff(1:D, ref)) {
B.bydrug <- NULL
for(d2 in setdiff(1:D, ref)) {
B <- NULL
for (col_id in 1:K) {
B.col <- NULL
index <- which(trait.ind$column.ind == col_id)
row_id <- trait.ind[index, 1]
for (iter in 1:length(index)) {
if(m > 1) {
B.col <- rbind(B.col, A[row_id[iter], col_id] *
update.C[[d1]][[index[iter]]])
}else{
B.col <- rbind(B.col, A[row_id[iter], col_id] * update.C)
}
}
B <- cbind(B, B.col)
}
B.bydrug <- cbind(B.bydrug, B_D[d1, d2] * B)
}
B.all <- rbind(B.all, B.bydrug)
}
B.all
(length(is.na(delta)) != 0)
delta
length(is.na(delta))
delta
length(is.na(delta))
length(!is.na(delta)) != 0
length(which(is.na(delta))) != 0
B.all
B.all[!is.na(delta), !is.na(delta), drop = FALSE]
length(which(is.na(delta))) != 0
B.all[!is.na(delta), !is.na(delta), drop = FALSE]
MAGENTA.eq4.sumstats <- function(beta.sumstats.obj, MAF, KA, drugStruct = "AR1",
trait.list, drug.list,test,ref = NULL,
R.C, cct = TRUE,
diffweight = FALSE,
threshold = 0.05,
weight.commonSNP = NULL,
rho.SNP = c(0, 0.5, 1),
rho.trait = c(0.5, 5, 1),
rho.drug = c(0, 0.5, 1),
weight.SNP = c(1, 25))
{
if(test == "joint") {
beta.est <- beta.sumstats.obj$beta.est
beta.cov <- beta.sumstats.obj$beta.cov
Sigma.beta.inv <- MASS::ginv(beta.cov)
}else if(test == "GEI") {
obs.stat <- beta.sumstats.obj$obs.stat
nonpoly.list <- beta.sumstats.obj$nonpoly.list
delta <- beta.sumstats.obj$delta
Sigma.delta <- beta.sumstats.obj$Sigma.delta
Sigma.delta.inv <- MASS::ginv(Sigma.delta)
}
## start from beta.est and beta.cov
D <- length(drug.list)
K <- length(trait.list)
m <- length(MAF)
snp.list <- names(MAF)
drug_trait <- expand.grid(trait = 1:K, drug = 1:D)
if(is.null(ref)) {
ref <- D
}
if (is.null(drugStruct)){
# message("Assume the effects among environmental groups are independent")
lambda <- expand.grid(lambdaA = rho.trait, lambdaC = rho.SNP, lambdaD = 0)
}else if(drugStruct == "AR1") {
# message("Assume the first-order autoregressive structure for the effects among environmental groups")
lambda <- expand.grid(lambdaA = rho.trait, lambdaC = rho.SNP, lambdaD = rho.drug)
}
if (is.null(KA)) {
message("Without the input of genetic correlation information, an exchangeable correlation structure among traits is assumed in MAGENTA.")
KA <- diag(K)
}
# message("Conducting MAGENTA analysis ...")
if(diffweight) {
# message("Use different weights for rare and common variants:")
if(is.null(weight.commonSNP)){
# message(paste0("No input of weight for common variants, use the default weight of dbeta(MAF,0.5,0.5) for common variants and dbeta(MAF,", paste0(weight.SNP, collapse = ","),  ") for rare variants"))
weight.commonSNP <- c(0.5, 0.5)
}else{
message(paste0("Use the weight of dbeta(MAF,", paste0(weight.SNP, collapse = ","),  ") for rare variants and the weight of dbeta(MAF,", paste0(weight.commonSNP, collapse = ","), ") for common variants"))
}
common.SNP <- which(MAF >= threshold)
}
KC <- diag(m)
MAF <- MAF[order(match(names(MAF), snp.list))]
if(diffweight) {
diag.tmp <- numeric(m)
if(length(common.SNP) != 0) {
diag.tmp[common.SNP] <- Beta.Weights(MAF[common.SNP], weights.beta = weight.commonSNP)
diag.tmp[-common.SNP] <- Beta.Weights(MAF[-common.SNP], weights.beta = weight.SNP)
}else{
diag.tmp <- Beta.Weights(MAF, weights.beta = weight.SNP)
}
}else{
diag.tmp <- Beta.Weights(MAF, weights.beta = weight.SNP) #weights matrix for SNPs
}
diag(KC) <- diag.tmp
WA <- diag(K)
JC <- matrix(1, nrow = m, ncol = m)
p.obs <- NULL
for (ii in 1:nrow(lambda)) {
lambdaA <- lambda[ii, 1]
A <- WA %*% apply(KA, 2, combMTAR, rho = lambdaA) %*% WA
lambdaC <- lambda[ii, 2]
C <- diag(KC) %*% t(diag(KC)) * ((1 - lambdaC) * diag(m) + lambdaC * JC)
if(test == "joint") {
B_D <- ar1_cor(D, lambda[ii, 3])
B.all <- kronecker(B_D, kronecker(A, C))
R <- chol(B.all, pivot = TRUE)
r <- attr(R, "rank")
if (r < nrow(B.all))
R[(r + 1):nrow(B.all), (r + 1):nrow(B.all)] <- 0
oo <- order(attr(R, "pivot"))
unpivQ <- R[, oo]
# rho <- try(Get_Lambda(unpivQ %*% Sigma.inv %*% t(unpivQ)), silent = TRUE)
rho <- try(Get_Lambda(unpivQ %*% Sigma.beta.inv %*% t(unpivQ)), silent = TRUE)
if (!inherits(rho, "try-error")) {
# part1 <-t(U.all) %*% U.inv %*%V.diag.all
part1 <- t(beta.est) %*% Sigma.beta.inv
Q <- as.numeric(part1 %*% B.all %*% t(part1))
pvalues <- Get_PValue.Lambda(rho, Q)$p.value
# print(pvalues)
p.obs <- c(p.obs, pvalues)
}
}else if(test == "GEI"){
colnames(C) <- snp.list
B_D <- ar1_cor(D-1, lambda[ii, 3])
trait.ind <- expand.grid(row.ind = 1:K, column.ind = 1:K)
if(m == 1) {
update.C <- C
}else{
update.C <- nonpolymorphic.fn(C, obs.stat, GEI = TRUE, nonpoly.list = nonpoly.list)
}
B.all <- NULL
for(d1 in setdiff(1:D, ref)) {
B.bydrug <- NULL
for(d2 in setdiff(1:D, ref)) {
B <- NULL
for (col_id in 1:K) {
B.col <- NULL
index <- which(trait.ind$column.ind == col_id)
row_id <- trait.ind[index, 1]
for (iter in 1:length(index)) {
if(m > 1) {
B.col <- rbind(B.col, A[row_id[iter], col_id] *
update.C[[d1]][[index[iter]]])
}else{
B.col <- rbind(B.col, A[row_id[iter], col_id] * update.C)
}
}
B <- cbind(B, B.col)
}
B.bydrug <- cbind(B.bydrug, B_D[d1, d2] * B)
}
B.all <- rbind(B.all, B.bydrug)
}
B.all <- B.all[!is.na(delta), !is.na(delta), drop = FALSE]
R <- chol(B.all, pivot = TRUE)
r <- attr(R, "rank")
if (r < nrow(B.all))
R[(r + 1):nrow(B.all), (r + 1):nrow(B.all)] <- 0
oo <- order(attr(R, "pivot"))
unpivQ <- R[, oo]
rho <- try(SKAT:::Get_Lambda(unpivQ %*% Sigma.delta.inv %*% t(unpivQ)), silent = TRUE)
# print(c(ii, class(rho)))
if (!inherits(rho, "try-error")) {
part1 <- t(delta[!is.na(delta)]) %*% Sigma.delta.inv
Q <- as.numeric(part1 %*% B.all %*% t(part1))
pvalues <- SKAT:::Get_PValue.Lambda(rho, Q)$p.value
p.obs <- c(p.obs, pvalues)
}
}
}
if(cct) {
MAGENTA.cct.p <- list(p = ACAT(p.obs[which(p.obs < 1)]),
rhoS.min = lambda[which.min(p.obs), 2],
rhoT.min = lambda[which.min(p.obs), 1],
rhoE.min = lambda[which.min(p.obs), 3])
}else{
MAGENTA.cct.p <- list(p = p.obs,
rhoS.min = lambda[which.min(p.obs), 2],
rhoT.min = lambda[which.min(p.obs), 1],
rhoE.min = lambda[which.min(p.obs), 3])
}
return(MAGENTA.cct.p)
}
MAGENTA.eq4.sumstats(beta.sumstats.obj = beta.sumstats.MTSV,
MAF = MAF[names(MAF) == MAC10.bygrp[SNP.id]],
KA = KA,test = test, ref = ref,
R.C = R.C[rownames(R.C) == MAC10.bygrp[SNP.id],
colnames(R.C) == MAC10.bygrp[SNP.id], drop = FALSE],
drugStruct = drugStruct,
trait.list = trait.list,
drug.list = drug.list,
cct = cct,
diffweight = diffweight,
threshold = threshold,
weight.commonSNP = weight.commonSNP,
rho.SNP = 1, rho.trait = rho.trait,
rho.drug = rho.drug, weight.SNP = weight.SNP
)$p
k <- 1
SNP.range <- grep(paste0(MAC10.bygrp[SNP.id], ":", k, ":"), names(beta.sumstats.obj$delta))
SNP.range
beta.sumstats.STSV <- list(delta = beta.sumstats.obj$delta[SNP.range],
Sigma.delta = beta.sumstats.obj$Sigma.delta[SNP.range, SNP.range, drop = FALSE],
obs.stat = sapply(obs.stat.SV, function(x) x[k], simplify = FALSE),
nonpoly.list = beta.sumstats.obj$nonpoly.list[k])
beta.sumstats.STSV
MAGENTA.eq4.sumstats(beta.sumstats.obj = beta.sumstats.STSV,
MAF =  MAF[names(MAF) == MAC10.bygrp[SNP.id]],
KA = matrix(1),test = test, ref = ref,
R.C = R.C[rownames(R.C) == MAC10.bygrp[SNP.id],
colnames(R.C) == MAC10.bygrp[SNP.id], drop = FALSE],
drugStruct = drugStruct,
trait.list = trait.list[k],
drug.list = drug.list,
cct = cct,
diffweight = diffweight,
threshold = threshold,
weight.commonSNP = weight.commonSNP,
rho.SNP = 1, rho.trait = 1,
rho.drug = rho.drug, weight.SNP = weight.SNP
)
MTSV.p <- rep(NA, length(MAC10.bygrp))
STSV.p <- matrix(NA, length(MAC10.bygrp), K)
for(SNP.id in 1:length(MAC10.bygrp)) {
## MTSV p value
obs.stat.SV <- list()
for(d in 1:D) {
obs.stat.SV.tmp <- list()
for(k in 1:K) {
obs.stat.SV.tmp[[k]] <- list(U = beta.sumstats.obj$obs.stat[[d]][[k]]$U[names(beta.sumstats.obj$obs.stat[[d]][[k]]$U) == MAC10.bygrp[SNP.id]],
V = beta.sumstats.obj$obs.stat[[d]][[k]]$V[names(beta.sumstats.obj$obs.stat[[d]][[k]]$U) == MAC10.bygrp[SNP.id],
names(beta.sumstats.obj$obs.stat[[d]][[k]]$U) == MAC10.bygrp[SNP.id], drop = FALSE])
}
obs.stat.SV[[d]] <- obs.stat.SV.tmp
}
SNP.range <- grep(paste0(MAC10.bygrp[SNP.id], ":"), names(beta.sumstats.obj$delta))
beta.sumstats.MTSV <- list(delta = beta.sumstats.obj$delta[SNP.range],
Sigma.delta = beta.sumstats.obj$Sigma.delta[SNP.range, SNP.range, drop = FALSE],
obs.stat = obs.stat.SV,
nonpoly.list = beta.sumstats.obj$nonpoly.list)
MTSV.p[SNP.id] <- try(MAGENTA.eq4.sumstats(beta.sumstats.obj = beta.sumstats.MTSV,
MAF = MAF[names(MAF) == MAC10.bygrp[SNP.id]],
KA = KA,test = test, ref = ref,
R.C = R.C[rownames(R.C) == MAC10.bygrp[SNP.id],
colnames(R.C) == MAC10.bygrp[SNP.id], drop = FALSE],
drugStruct = drugStruct,
trait.list = trait.list,
drug.list = drug.list,
cct = cct,
diffweight = diffweight,
threshold = threshold,
weight.commonSNP = weight.commonSNP,
rho.SNP = 1, rho.trait = rho.trait,
rho.drug = rho.drug, weight.SNP = weight.SNP
)$p, silent = T)
## STSV p value
for(k in 1:K) {
SNP.range <- grep(paste0(MAC10.bygrp[SNP.id], ":", k, ":"), names(beta.sumstats.obj$delta))
beta.sumstats.STSV <- list(delta = beta.sumstats.obj$delta[SNP.range],
Sigma.delta = beta.sumstats.obj$Sigma.delta[SNP.range, SNP.range, drop = FALSE],
obs.stat = sapply(obs.stat.SV, function(x) x[k], simplify = FALSE),
nonpoly.list = beta.sumstats.obj$nonpoly.list[k])
STSV.p[SNP.id, k] <- try(MAGENTA.eq4.sumstats(beta.sumstats.obj = beta.sumstats.STSV,
MAF =  MAF[names(MAF) == MAC10.bygrp[SNP.id]],
KA = matrix(1),test = test, ref = ref,
R.C = R.C[rownames(R.C) == MAC10.bygrp[SNP.id],
colnames(R.C) == MAC10.bygrp[SNP.id], drop = FALSE],
drugStruct = drugStruct,
trait.list = trait.list[k],
drug.list = drug.list,
cct = cct,
diffweight = diffweight,
threshold = threshold,
weight.commonSNP = weight.commonSNP,
rho.SNP = 1, rho.trait = 1,
rho.drug = rho.drug, weight.SNP = weight.SNP
)$p, silent = T)
}
}
names(MTSV.p) <- MAC10.bygrp
rownames(STSV.p) <- MAC10.bygrp
colnames(STSV.p) <- trait.list
STSV.p
MTSV.p
SNP.id <- 2
## MTSV p value
obs.stat.SV <- list()
for(d in 1:D) {
obs.stat.SV.tmp <- list()
for(k in 1:K) {
obs.stat.SV.tmp[[k]] <- list(U = beta.sumstats.obj$obs.stat[[d]][[k]]$U[names(beta.sumstats.obj$obs.stat[[d]][[k]]$U) == MAC10.bygrp[SNP.id]],
V = beta.sumstats.obj$obs.stat[[d]][[k]]$V[names(beta.sumstats.obj$obs.stat[[d]][[k]]$U) == MAC10.bygrp[SNP.id],
names(beta.sumstats.obj$obs.stat[[d]][[k]]$U) == MAC10.bygrp[SNP.id], drop = FALSE])
}
obs.stat.SV[[d]] <- obs.stat.SV.tmp
}
obs.stat.SV
SNP.range <- grep(paste0(MAC10.bygrp[SNP.id], ":"), names(beta.sumstats.obj$delta))
SNP.range
beta.sumstats.MTSV <- list(delta = beta.sumstats.obj$delta[SNP.range],
Sigma.delta = beta.sumstats.obj$Sigma.delta[SNP.range, SNP.range, drop = FALSE],
obs.stat = obs.stat.SV,
nonpoly.list = beta.sumstats.obj$nonpoly.list)
beta.sumstats.MTSV
## start from the summary statistics data ##
load("/home/luolan2/MAGENTA/data/sumstats_data.rda")
names(sumstats.dat)
attach(sumstats.dat)
MAF
rm(list = ls())
source("/home/luolan2/MAGENTA/R/sumstats.R")
source("/home/luolan2/MAGENTA/R/misc.R")
source("/home/luolan2/MAGENTA/R/other.R")
source("/home/luolan2/MAGENTA/R/important.R")
source("/home/luolan2/MAGENTA/R/MAGENTA.R")
source("/home/luolan2/MAGENTA/R/ACAT.R")
load("/home/luolan2/MAGENTA/data/rawdata.rda")
names(rawdata)
attach(rawdata)
head(dat)
head(geno.dat)
## data input
>>>>>>> 1acaa07efa8608a46c52ce8a09843a12e3dbcfe1
K <- 3
KA <- matrix(c(1, -0.03, 0.3, -0.03, 1, -0.535, 0.3, -0.535, 1), byrow = T, nrow = 3)
rownames(KA) <- colnames(KA) <- paste0("Trait", 1:K)
trait.list = paste0("Trait", 1:K)
drug.list = paste0("Drug", 0:1)
D <- 2
<<<<<<< HEAD
# source("/home/luolan2/MTAR_PGx/MAGENTA_fns.R")
source("/home/luolan2/MAGENTA/R/sumstats.R")
source("/home/luolan2/MAGENTA/R/sumstats_ongoing.R")
source("/home/luolan2/MAGENTA/R/misc.R")
source("/home/luolan2/MAGENTA/R/other.R")
source("/home/luolan2/MAGENTA/R/MAGENTA.R")
source("/home/luolan2/MAGENTA/R/ACAT.R")
source("/home/luolan2/MAGENTA/R/old_MAGENTA.R")
load("/home/luolan2/MAGENTA/data/sumstats_data.rda")
names(sumstats.dat)
attach(sumstats.dat)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
names(zeta.ret)
zeta.ret
load("/home/luolan2/MAGENTA/data/sumstats_data.rda")
names(sumstats.dat)
attach(sumstats.dat)
all.equal(common.sumstats, sumstats.dat$common.sumstats)
beta.sumstats.obj2 <- Get_beta_cov_UV(sumstats = sumstats, MAF = MAF, R.C = R.C,
zeta.ret = zeta.ret, KA = KA,
test = "joint",
trait.list = paste0("Trait", 1:K))
=======
load("/home/luolan2/MAGENTA/data/sumstats_data.rda")
names(sumstats.dat)
attach(sumstats.dat)
MAF
str(common.sumstats)
zeta.ret <- Get_zeta(common.sumstats = common.sumstats, trait.list = paste("Trait", 1:K))
# zeta.ret
str(sumstats) ## variant-level score summary statistics U and V as input data, generated by cal.sum, zero means that SNP is a non-polymorphic SNP for trait k and environmental group d
#prepare the summary statistics for joint test using trait-specific score summary statistics
beta.sumstats.obj <- Get_beta_cov_UV(sumstats = sumstats, MAF = MAF, R.C = R.C,
zeta.ret = zeta.ret, KA = KA,
test = "joint",
trait.list = paste0("Trait", 1:K))
names(beta.sumstats.obj)
MAGENTA.eq4.4cat.sumstats(beta.sumstats.obj = beta.sumstats.obj,
MAF = MAF, KA = KA,MAC10.bygrp = joint.MAC10,
drugStruct = "AR1", test = "joint",
trait.list, drug.list,
output = "everything",
R.C = R.C)
#prepare the summary statistics for joint test using trait-specific score summary statistics
beta.sumstats.obj <- Get_beta_cov_UV(sumstats = sumstats, MAF = MAF, R.C = R.C,
zeta.ret = zeta.ret, KA = KA,
test = "GEI",
trait.list = paste0("Trait", 1:K))
names(beta.sumstats.obj)
## same as MAGENTA.GEI.way1(sumstats = sumstats, MAF = MAF, KA = KA, drugStruct = "AR1", R.C = R.C, zeta = zeta.ret$zeta.GE, ref = D)
MAGENTA.eq4.sumstats(beta.sumstats.obj = beta.sumstats.obj,
MAF,test = "GEI", ref = D,
KA = KA,
drugStruct = "AR1",
trait.list = trait.list,
drug.list = drug.list,
R.C = R.C)
MAGENTA.eq4.4cat.sumstats(beta.sumstats.obj = beta.sumstats.obj,
MAF = MAF, KA = KA,MAC10.bygrp = GEI.MAC10,
drugStruct = "AR1", test = "GEI", ref = D,
trait.list, drug.list,
output = "everything",
R.C = R.C)
>>>>>>> 1acaa07efa8608a46c52ce8a09843a12e3dbcfe1
